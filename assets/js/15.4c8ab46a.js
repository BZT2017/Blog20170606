(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{213:function(e,t,s){"use strict";s.r(t);var a=s(0),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"vuex-简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vuex-简介"}},[e._v("#")]),e._v(" vuex 简介")]),e._v(" "),s("p",[e._v("Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。Vuex 也集成到 Vue 的官方调试工具 devtools extension，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能。")]),e._v(" "),s("h2",{attrs:{id:"vuex-使用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vuex-使用场景"}},[e._v("#")]),e._v(" vuex 使用场景")]),e._v(" "),s("p",[e._v("Vuex 可以帮助我们管理共享状态，并附带了更多的概念和框架。这需要对短期和长期效益进行权衡。")]),e._v(" "),s("p",[e._v("如果您不打算开发大型单页应用，使用 Vuex 可能是繁琐冗余的。确实是如此——如果您的应用够简单，您最好不要使用 Vuex。一个简单的 store 模式就足够您所需了。")]),e._v(" "),s("p",[e._v("但是，如果您需要构建一个中大型单页应用，您很可能会考虑如何更好地在组件外部管理状态，Vuex 将会成为自然而然的选择。引用 Redux 的作者 Dan Abramov 的话说就是：")]),e._v(" "),s("pre",[s("code",[e._v("Flux 架构就像眼镜：您自会知道什么时候需要它。\n")])])])}),[],!1,null,null,null);t.default=r.exports}}]);